package ar.wildstyle.valuegenerator;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

/**
 * {@code StringValueGenerator} is an implementation of {@link ValueGenerator} that generates {@link String} values.
 *
 * @author Adam Rosini
 */
public class StringValueGenerator implements ValueGenerator<String> {

   /**
    * The default minimum length of values generated by instances of this class.
    */
   public static final int DEFAULT_MIN_LENGTH = 0;

   /**
    * The default maximum length of values generated by instances of this class.
    */
   public static final int DEFAULT_MAX_LENGTH = 100;

   /**
    * The default list of allowable characters for values generated by instances of this class.
    */
   public static final List<Character> DEFAULT_ALLOWABLE_CHARACTERS = new ArrayList<>(95);
   static {
      for (int i = 32; i < 127; i++) {
         StringValueGenerator.DEFAULT_ALLOWABLE_CHARACTERS.add((char)i);
      }
   }

   /**
    * The default percent chance that a {@code null} value is {@linkplain #generateValue generated} by instances of this class.
    */
   public static final double DEFAULT_NULL_CHANCE = 0;

   /**
    * Creates a new {@code StringValueGenerator} that will generate {@link String} values with {@linkplain String#length lengths} between
    * {@value #DEFAULT_MIN_LENGTH} and {@value #DEFAULT_MAX_LENGTH} (inclusive) using only characters found in the
    * {@linkplain #DEFAULT_ALLOWABLE_CHARACTERS default list of allowable characters}.
    */
   public StringValueGenerator() {
      this(StringValueGenerator.DEFAULT_MIN_LENGTH, StringValueGenerator.DEFAULT_MAX_LENGTH,
         StringValueGenerator.DEFAULT_ALLOWABLE_CHARACTERS, StringValueGenerator.DEFAULT_NULL_CHANCE);
   }

   /**
    * Creates a new {@code StringValueGenerator} that will generate {@link String} values with {@linkplain String#length lengths} between
    * {@code minLength} and {@code maxLength} (inclusive) using only characters found in the {@linkplain #DEFAULT_ALLOWABLE_CHARACTERS
    * default list of allowable characters}.
    *
    * @pre minLength >= 0
    * @pre maxLength >= 1
    * @pre minLength <= maxLength
    */
   public StringValueGenerator(int minLength, int maxLength) {
      // Precondition(s) asserted by the call to "this(...)".
      this(minLength, maxLength, StringValueGenerator.DEFAULT_ALLOWABLE_CHARACTERS, StringValueGenerator.DEFAULT_NULL_CHANCE);
   }

   /**
    * Creates a new {@code StringValueGenerator} that will generate {@link String} values with {@linkplain String#length lengths} between
    * {@value #DEFAULT_MIN_LENGTH} and {@value #DEFAULT_MAX_LENGTH} (inclusive) using only characters found in {@code allowableCharacters}.
    *
    * @pre !allowableCharacters.isEmpty()
    */
   public StringValueGenerator(List<Character> allowableCharacters) {
      // Precondition(s) asserted by the call to "this(...)".
      this(StringValueGenerator.DEFAULT_MIN_LENGTH, StringValueGenerator.DEFAULT_MAX_LENGTH, allowableCharacters,
         StringValueGenerator.DEFAULT_NULL_CHANCE);
   }

   /**
    * Creates a new {@code StringValueGenerator} that will generate {@link String} values with {@linkplain String#length lengths} between
    * {@value #DEFAULT_MIN_LENGTH} and {@value #DEFAULT_MAX_LENGTH} (inclusive) using only characters found in the
    * {@linkplain #DEFAULT_ALLOWABLE_CHARACTERS default list of allowable characters}, with a {@code nullChance} percent chance of
    * generating a {@code null} value.
    *
    * @pre nullChance >= 0
    * @pre nullChance <= 100
    */
   public StringValueGenerator(double nullChance) {
      // Precondition(s) asserted by the call to "this(...)".
      this(StringValueGenerator.DEFAULT_MIN_LENGTH, StringValueGenerator.DEFAULT_MAX_LENGTH,
         StringValueGenerator.DEFAULT_ALLOWABLE_CHARACTERS, nullChance);
   }

   /**
    * Creates a new {@code StringValueGenerator} that will generate {@link String} values with {@linkplain String#length lengths} between
    * {@code minLength} and {@code maxLength} (inclusive) using only characters found in {@code allowableCharacters}.
    *
    * @pre minLength >= 0
    * @pre maxLength >= 1
    * @pre minLength <= maxLength
    * @pre !allowableCharacters.isEmpty()
    */
   public StringValueGenerator(int minLength, int maxLength, List<Character> allowableCharacters) {
      // Precondition(s) are asserted by the call to "this(...)"
      this(minLength, maxLength, allowableCharacters, StringValueGenerator.DEFAULT_NULL_CHANCE);
   }

   /**
    * Creates a new {@code StringValueGenerator} that will generate {@link String} values with {@linkplain String#length lengths} between
    * {@code minLength} and {@code maxLength} (inclusive) using only characters found in the {@linkplain #DEFAULT_ALLOWABLE_CHARACTERS
    * default list of allowable characters}, with a {@code nullChance} percent chance of generating a {@code null} value.
    *
    * @pre minLength >= 0
    * @pre maxLength >= 1
    * @pre minLength <= maxLength
    * @pre nullChance >= 0
    * @pre nullChance <= 100
    */
   public StringValueGenerator(int minLength, int maxLength, double nullChance) {
      // Precondition(s) asserted by the call to "this(...)".
      this(minLength, maxLength, StringValueGenerator.DEFAULT_ALLOWABLE_CHARACTERS, nullChance);
   }

   /**
    * Creates a new {@code StringValueGenerator} that will generate {@link String} values with {@linkplain String#length lengths} between
    * {@value #DEFAULT_MIN_LENGTH} and {@value #DEFAULT_MAX_LENGTH} (inclusive) using only characters found in {@code allowableCharacters},
    * with a {@code nullChance} percent chance of generating a {@code null} value.
    *
    * @pre !allowableCharacters.isEmpty()
    * @pre nullChance >= 0
    * @pre nullChance <= 100
    */
   public StringValueGenerator(List<Character> allowableCharacters, double nullChance) {
      // Precondition(s) asserted by the call to "this(...)".
      this(StringValueGenerator.DEFAULT_MIN_LENGTH, StringValueGenerator.DEFAULT_MAX_LENGTH, allowableCharacters, nullChance);
   }

   /**
    * Creates a new {@code StringValueGenerator} that will generate {@link String} values with {@linkplain String#length lengths} between
    * {@code minLength} and {@code maxLength} (inclusive) using only characters found in {@code allowableCharacters}, with a
    * {@code nullChance} percent chance of generating a {@code null} value.
    *
    * @pre minLength >= 0
    * @pre maxLength >= 1
    * @pre minLength <= maxLength
    * @pre !allowableCharacters.isEmpty()
    * @pre nullChance >= 0
    * @pre nullChance <=100
    */
   public StringValueGenerator(int minLength, int maxLength,
      List<Character> allowableCharacters, double nullChance)
   {
      assert minLength >= 0 : "The 'minLength' parameter must be greater than or equal to 0.";
      assert maxLength >= 1 : "The 'maxLength' parameter must be greater than or equal to 1.";
      assert minLength <= maxLength : "The 'minLength' parameter must be less than or equal to the 'maxLength' parameter.";
      assert allowableCharacters != null : "The 'allowableCharacters' parameter cannot be null.";
      assert !allowableCharacters.isEmpty() : "The 'allowableCharacters' parameter cannot be empty.";
      assert nullChance >= 0 : "The 'nullChance' parameter must be greater than or equal to 0.";
      assert nullChance <= 100 : "The 'nullChance' parameter must be less than or equal to 100.";

      this.minLength = minLength;
      this.maxLength = maxLength;
      this.allowableCharacters = allowableCharacters;
      this.nullChance = nullChance;
      this.random = new Random();
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public String generateValue() {
      if (this.random.nextInt(100) < this.nullChance) {
         return null;
      }

      final int randomStringLength = ThreadLocalRandom.current().nextInt(this.minLength - 1, this.maxLength) + 1;
      final int allowableCharactersSize = this.allowableCharacters.size();

      final StringBuilder randomStringBuilder = new StringBuilder(randomStringLength);
      for (int x = 0; x < randomStringLength; x++) {
         final int nextCharacterIndex = ThreadLocalRandom.current().nextInt(0, allowableCharactersSize);
         randomStringBuilder.append(this.allowableCharacters.get(nextCharacterIndex));
      }

      return randomStringBuilder.toString();
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public Class<String> getValueType() {
      return String.class;
   }

   /**
    * The minimum possible {@linkplain String#length length} (inclusive) of a value {@linkplain #generateValue generated} by this value
    * generator.
    *
    * @invariant minLength >= 0
    * @invariant minLength <= maxLength
    */
   private final int minLength;

   /**
    * The maximum possible {@linkplain String#length length} (inclusive) of a value {@linkplain #generateValue generated} by this value
    * generator.
    *
    * @invariant maxLength >= 1
    * @invariant maxLength >= minLength
    */
   private final int maxLength;

   /**
    * The list of characters that a value {@linkplain #generateValue generated} by this value generator may be comprised of.
    *
    * @invariant allowableCharacters != null
    */
   private final List<Character> allowableCharacters;

   /**
    * The percent chance that a {@code null} value is {@linkplain #generateValue generated} by this value generator.
    *
    * @invariant nullChance >= 0
    * @invariant nullChance <= 100
    */
   private final double nullChance;

   /**
    * The random instance associated with this value generator.
    *
    * @invariant random != null
    */
   private final Random random;

}
