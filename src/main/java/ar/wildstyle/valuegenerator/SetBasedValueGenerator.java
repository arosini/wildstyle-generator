package ar.wildstyle.valuegenerator;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ThreadLocalRandom;

/**
 * {@code SetBasedValueGenerator} generates objects of type {@code T} by selecting them from a predefined set, with no order guarantees.
 */
public class SetBasedValueGenerator<T> implements ValueGenerator<T> {

   /**
    * Creates a new {@code SetBasedValueGenerator} that will generate values from the given {@code values} with no order guarantees. If
    * {@code uniqueSelections} is true, all values in {@code values} will be generated an equal number of times before any value is
    * generated again. For example, all values will be generated once, then all values will be generated twice, and so on. If
    * {@code uniqueSelections} is false, any value in {@code values} may be generated at any time.
    *
    * @pre valueType != null
    * @pre !values.isEmpty()
    */
   public SetBasedValueGenerator(Class<T> valueType, Set<T> values, boolean uniqueSelections) {
      assert valueType != null : "The 'valueType' parameter cannot be null.";
      assert values != null : "The 'values' parameter cannot be null.";
      assert !values.isEmpty() : "The 'values' parameter cannot be empty.";

      this.valueType = valueType;
      this.values = new ArrayList<>(values);
      this.uniqueSelections = uniqueSelections;
      this.usedValues = new HashSet<>();
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public T generateValue() {
      if (!this.uniqueSelections) {
         return this.values.get(ThreadLocalRandom.current().nextInt(this.values.size()));
      }

      if (this.values.isEmpty()) {
         this.values.addAll(this.usedValues);
         Collections.shuffle(this.values);
      }

      final T value = this.values.remove(0);
      this.usedValues.add(value);

      return value;
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public Class<T> getValueType() {
      return this.valueType;
   }

   /**
    * The type of value generated by this object generator.
    *
    * @invariant valueType != null
    */
   private final Class<T> valueType;

   /**
    * The list of values associated with this object generator.
    *
    * @invariant !values.isEmpty();
    */
   private final List<T> values;

   /**
    * Indicates if all values in {@code values} will be returned before any values are returned twice.
    */
   private final boolean uniqueSelections;

   /**
    * The list of used values associated with this object generator.
    *
    * @invariant usedValues != null
    */
   private final Set<T> usedValues;

}
