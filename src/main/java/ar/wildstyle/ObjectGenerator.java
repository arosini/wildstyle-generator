package ar.wildstyle;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import ar.wildstyle.util.ReflectionUtils;
import ar.wildstyle.valuegenerator.ValueGenerator;

/**
 * {@code ObjectGenerator} is used to generate objects of type {@code T}.
 *
 * @see ObjectGeneratorBuilder
 * @see FieldMapping
 *
 * @author Adam Rosini
 */
public class ObjectGenerator<T> implements ValueGenerator<T> {

   /**
    * The default named given to an object generator.
    */
   public static final String DEFAULT_NAME = "default";

   /**
    * The default constructor arguments given to an object generator.
    */
   public static final List<Object> DEFAULT_CONSTRUCTOR_ARGS = new ArrayList<Object>();

   /**
    * The default null chance given to an object generator.
    */
   public static final int DEFAULT_NULL_CHANCE = 0;

   /**
    * Creates a new object generator with the given parameters. The given list of constructor arguments may contain
    * {@linkplain ValueGenerator value generators}, whose {@linkplain ValueGenerator#generateValue generated values} are used when calling
    * {@link #generateValue}. If a parent object generator is given, its field mapping will be {@linkplain FieldMapping#merge merged} with
    * the given field mapping.
    *
    * @pre !name.isEmpty()
    * @pre // ReflectionUtils.newInstance(fieldMapping.getType(), constructorArgs) does not throw an exception
    * @pre nullChance >= 0
    * @pre nullChance <= 100
    * @post return.getValueType().equals(fieldMapping.getType())
    * @post return.getName().equals(name)
    */
   public ObjectGenerator(String name, FieldMapping<T> fieldMapping, List<Object> constructorArgs, double nullChance,
      ObjectGenerator<? super T> parent)
   {
      assert name != null : "The 'name' parameter cannot be null.";
      assert !name.isEmpty() : "The 'name' parameter cannot be empty.";
      assert fieldMapping != null : "The 'fieldMapping' parameter cannot be null.";
      assert constructorArgs != null : "The 'constructorArgs' parameter cannot be null.";
      assert nullChance >= 0 : "The 'nullChance' parameter must be greater than or equal to 0.";
      assert nullChance <= 100 : "The 'nullChance' parameter must be less than or equal to 100.";

      try {
         ReflectionUtils.newInstance(fieldMapping.getType(), constructorArgs);
      }
      catch (final Exception e) {
         throw new AssertionError(e);
      }

      this.valueType = fieldMapping.getType();
      this.name = name;
      this.fieldMapping = parent == null ? fieldMapping : FieldMapping.merge(fieldMapping, parent.fieldMapping);
      this.constructorArgs = constructorArgs;
      this.nullChance = nullChance;
      this.random = new Random();
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public T generateValue() {
      // Determine if a null should be generated.
      if (this.random.nextDouble() * 100 < this.nullChance) {
         return null;
      }

      // Create a new instance of the value type with the constructor arguments.
      final T instance = ReflectionUtils.newInstance(this.valueType, this.constructorArgs);

      // Set fields explicitly provided in the field mapping.
      for (final FieldMappingEntry<?> fieldMappingEntry : this.fieldMapping) {
         ReflectionUtils.setField(instance, fieldMappingEntry.getField(), fieldMappingEntry.getOrGenerateValue());
      }

      return instance;
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public boolean canGenerateNull() {
      return this.nullChance > 0;
   }

   /**
    * Returns the type of value generated by this object generator.
    *
    * @post return != null
    */
   @Override
   public Class<T> getValueType() {
      return this.valueType;
   }

   /**
    * Returns the name of this object generator.
    *
    * @post !return.isEmpty()
    */
   public String getName() {
      return this.name;
   }

   /**
    * The type of value generated by this object generator.
    *
    * @invariant valueType.equals(fieldMapping.getType())
    */
   private final Class<T> valueType;

   /**
    * The name of this object generator.
    *
    * @invariant !name.isEmpty()
    */
   private final String name;

   /**
    * The field mapping associated with this object generator.
    *
    * @invariant fieldMapping.getType().equals(valueType)
    */
   private final FieldMapping<T> fieldMapping;

   /**
    * The list of arguments used by this object generator when creating instances of {@code T}. This list may contain
    * {@linkplain ValueGenerator value generators}, whose {@linkplain ValueGenerator#generateValue generated values} are used when creating
    * new instances of {@code T}, rather than the value generator itself.
    *
    * @invariant constructorArgs != null
    */
   private final List<Object> constructorArgs;

   /**
    * The chance that this object generator generates a null value when {@link #generateValue} is invoked.
    *
    * @invariant nullChance >= 0
    * @invariant nullChance <= 100
    */
   private final double nullChance;

   /**
    * The random value generator associated with this object generator.
    *
    * @invariant random != null
    */
   private final Random random;

}
